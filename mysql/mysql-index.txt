#mysql 索引。 

博客； https://www.jb51.net/article/140749.htm

1，主键索引 primary key 
    语法：
    primary key(userid), #在userid列上建立主键索引。 
    主键索引自动建立唯一索引。 一张表只有一个主键索引。 所以主键索引也是唯一的。 

2. 唯一索引
语法：
unique key(id);  #在建表时定义
create unique id on users(id);    # 在表users 里创建列id的索引
create unique userid on users(userid); 
create unique indexname on tablename(column); # 基本语法， 在某一个表的某一列创建索引。 

alter table users add unique userid on(userid);  #更爱users表，在userid建立表。 
alter table users add unique id on(id); # 更改users表，在id列建立唯一索引。
alter table table_name add unique uniquename  on(column);   #更改表table_name , 在列column 建立唯一索引。 

drop index  userid on users;  #删掉表users里的索引userid。 
show index  from tblname ; #查看表tblname 的索引。 

唯一索引要求每一列的数值不同， 具有唯一性。 

3. 普通索引
key(id) 
index(id)
create index id on tblname(column);  #在表tblname 的column列创建索引id； 
alter table users add index on(id); #在表users里创建索引id； 

5. 磁盘IO 与 预读。 
   磁盘预读数据靠的是机械运动。 每次读取数据花费的时间包括寻道时间， 旋转延迟， 传输时间。 每次磁盘IO的操作是非常昂贵的操作。 
   需要尽量减少磁盘IO的次数。 

6. 索引的数据结构。 
    b+树。 
    每次查找数据时把磁盘IO次数控制在一个很小的数量级， 最好是常量级。 
    b+树只在叶子节点存放真实的数据。 在非叶子节点存放非真实数据和磁盘块指针。 应该尽量减少树的高度， 从而来减少磁盘IO次数。 
    b+树的性质。 
    1. 索引的字段应该尽量的小。 磁盘IO的次数取决于b+树的高度。 h = log(m+1)N, N表示数据量， m越大，h越小。 m=磁盘块的大小/
     数据项的大小。 实际上m表示每一个磁盘块存放的数据的数量。 磁盘块的 大小是固定的4k或者8k，取决于操作系统。 

    2. 索引最左匹配特性。 


7. 聚集索引 和 非聚集索引。 
    innodb 和 myisam 都是使用的b+树数据结构组织索引结构， 也就是叶子节点包含了所有的的索引数据。 
    区别在于， 叶子节点的存放的数据。 
    聚集索引的叶子节点和数据完全绑定在一起， 然后叶子节点通过链表连接起来。 
    非聚集索引的叶子节点和数据块的指针绑定在一起，然后通过指针引用数据块。 
    innodb    主键索引是聚集索引。复合索引， 唯一索引， 普通索引都是辅助索引，或者叫二级索引。 如果表没有指定主键索引，则
                   使用唯一索引作为主键索引。 如果没有唯一索引，系统默认创建一个主键索引。 一般选择自增的id作为主键。  
    myisam   非聚集索引。 


   B树 和 B+树的区别。 
   B树    叶子节点和非叶子节点都包含有数据部分。 也就是说索引节点和数据是绑定在一起的。 
   B+树    非叶子节点不包含数据部分， 只有叶子节点包含有数据部分， 并且叶子节点包含所有的索引数据， 叶子节点通过链表连接起来。 

8. 主键索引  和  辅助索引。 
    主键索引有一份自己的节点数据，这个数据是表里面的其他数据部分 ，是一份完整的数据。  
    辅助索引没有一份自己独立的数据， 节点部分存放的是主键索引的数据。

8. innodb 和 myisam 的区别和选择。 
    innodb 和 myisam 底层实现都使用b+tree。 但是innodb的索引和数据绑定在一起， 即聚集索引， 只有两个部分， 表定义和数据部分。 
    myisam的索引和数据是分开的， 分为3个部分， 表定义，索引部分， 数据部分。 
    innodb 是聚集索引， myisam 是非聚集索引。 
    innodb 支持行级和表级锁。  myisam 支持表级锁。 
    innodb 支持外键。 myisam 不支持外键。 
    innodb  5.7支持不支持全文索引。 myisam 支持全文索引。 
    innodb 没有保存表的行数。  myisam  保存了表的行数。 
    innodb  支持事务。 myisam 不支持事务。 
    innodb 必须有主键。 myisam  可以没有主键。 

    需要的事务的时候，必须选择innodb。 
    读写都需要的额时候， 选择innodb。 
    多读的时候选择innodb。 


8. 索引的两大类型。 
   hash   b-tree  b+tree。 


9. 索引的优化。 正确使用索引。 
  1. 范围的问题， 或者条件不明确的情况。 条件中出现关键字：> , >=, < , <=, !=, between ... and ... , like. 
     一个原则， 如果检索的范围很大，将会出现全表扫描， 性能很低。 

   例如：select count(*) from s1 where id = 1000; #明确指明id， 检索的速度很快。 
            select count(*)  from table where id > 1000;  # 没有明确指明哪一个，或者几个id， 引擎会从1001开始扫描， 如果数据很大将会
             出现 全局扫描。 
           select count(*) from tabl where id > 1000 and id <2000; #速度很快。 
      
     ！= 

      between  ... and ...

       like 


       and  or . 



