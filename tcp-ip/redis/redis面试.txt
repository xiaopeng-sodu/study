1. 什么是redis持久化？redis有哪几种持久化方式？优缺点分别是什么？
   redis持久化是将内存里的数据落到磁盘的过程。 redis是内存型数据库， 数据存在内存里， 服务器宕机，将会发生灾难， 数据全部丢失。 
   所以要采取一定的策略定时或者以一定的条件将数据写进磁盘， 保障数据的安全性。 当服务器重启时， 将磁盘文件的数据重新加载到内存。 

   有aof 和 rdb 两种持久化方式。 

   rdb 全名 redis database。 
   rdb 是将某一个时刻内存的数据的记录下来， 写入磁盘。 
   rdb是快照方式来持久化， 在某一个时刻快照内存， 将某一个时刻内存里的数据，进行磁盘IO，放置在磁盘上。 
   rdb是通过fork一个子进程处理内存里的数据，将内存数据写进一个临时文件，等数据写完之后，用临时文件替代之前的rdb.dump文件。 
   子进程负责将内存数据写入临时文件，主进程仍然响应客服端的请求。 这样极大的提高了redis的性能。 1G的内存大约需要20-30秒。 

   rdb持久化有两个方式， save 和 bgsave。 
   save命令  利用主线程处理，是同步操作，对于大量数据的操作会造成服务器的假死现象， 客服端的请求会响应延迟严重。 （避免使用）
   bgsave命令  fork一个子进程， 异步操作， 利用子进程处理内存数据到临时文件的落地，再用临时文件替换之前的rdb.dump文件。
   利用子进程进程处理内存的快照， 不会造成客户端的阻塞现象。
 
   优点。 适合灾难备份。 适合大量数据集的情况。 最大化redis的性能， 父进程fork的子进程， 子进程复制IO操作。 
              rdb是一个非常紧凑的文件， 保存了某一个时间点的数据集， 非常适合备份。 
   缺点。 对于不满足触发rdb落地条件的情况下，会造成这段时间里的数据丢失。 对于数据完整性要求较高的情况， 不推荐使用。 

   rdb的配置， 触发 条件。  
   dbfilename = dump_6379.rdb  #快照文件名
   dir = "./"  #放置目录
   save  900 1   #在900s内，至少有一次写操作，进行快照。 
   save  300 10  #300s内， 至少有10次写操作， 进行快照。 
   save  60 10000   #60s内， 至少有10000次写操作， 进行快照。 
  
   aof 全名append of file。 
   aof以日志的形式记录redis的每一个写操作， 不记录读操作， 使用追加文件的方式， 不可以改写文件。 
   aof 是记录每一次写操作。 将每一个写操作记录在磁盘里， 这样会减少了数据的丢失。 
   如果rdb.dump 和 appendfsync.aof 文件同时存在时， 默认使用appendfsync.aof文件， 也就是当两种持久化方式都开启的时候， 默认使用
   aof方式进行持久化。 
   优点。 数据更加安全。 
   缺点。 性能差于rdb， aof文件比rdb文件大。 

   重写机制。 
   aof文件以追加的方式写入， 这样文件会越来越大。 以重写的方式减少文件的大小。 例如对同一个键值写操作，只记录最后一次写操作， 删掉
   之前的写操作。 
   auto-aof-rewrite-percentage 100  
   auto-aof-rewrite-min-size  64m
   重写的触发机制：当前aof文件比上一次重写时aof文件大小增加了1倍， 并且aof的文件大于64m， 会触发重写机制。 

   aof 的配置， 触发条件。 
   appendonly = yes
   appendfilename "appendonly_6379.aof"   #aof持久化文件。 
   appendfsync always   #对每一个写操作都会追加。 数据最完整， 性能最差。 
   appendfsync everysec   # 每一秒钟追加一次。 最大可能会丢失1秒内的数据。折中的做法。 （一般会使用这种策略）
   appendfsync  no    # 根据系统来追加，一般是30s。 数据的完整性最差， 性能最好。 
  
