1. limit。
   select * from tbl limit OFFSET , offset;   
   OFFSET 表示偏移量。 offset 表示偏移的最大行数(就是要输出的行数）。 
   表示从第一行开始，偏移OFFSET后， 选取offset行的数据， 即输出的总行数为offset。
   也就是选取   OFFSET+1 ~ offset    之间的数据显示。
   select  *  from  test_tbl  limit  5;    # 表示取前5行的数据。 
   select  *  from  test_tbl  limit  5,  10;   #表示取 6 ~ 15行的数据。 
   select  *  from  test_tbl  limit  10, -1;   #表示取11 ~ 最后一行的数据。 

2. 数据类型decimal(n, m).  
    decimal用于精确度很高的情况， 例如money等。 n表示数据总位数（包括整数位和小数位之和） ， m表示小数点的位数 。 
    money   decimal  not null,  # 这种情况下默认为（10,2）# 表示总数据位为10， 小数位占2位。
    money   decimal(20,4) not null,  # 表示总数据位为20位， 小数位占有4位。 
    decimal 的数据类型以格式化的方式写入时， 应该是%s, 不是%d。 #在skynet遇到了这个坑，记录一下。 

3. order by  按照指定的方式排序， 默认为升序。 desc 表示降序。 
    select  *  from  shop  order by id desc;  # shop表所有的数据按照降序排序。 
    select  *  from  users  order by  userid desc  limit 5;   #users表按照userid降序排列，然后取5行数据。  

4. mysql的时间类型。 
   timestamp  # 4个字节，  1970-01-01 00:00:00 ~ 2038-12-31 23:59:59  混合时间， 时间值
   datetime  # 8个字节， 1000-01-01 00:00:00 ~  9999-12-31 23:59:59   混合时间 ， 时间值， 相比timestamp，datetime的范围更广。
   date #3个字节， 1000-01-01 ~ 9999-12-31 日期值，年月日 
   time  # 3个字节 ， ‘-838:59:59’~ '838:59:59'   时间值或者持续时间
   year  # 1个字节， 1901 ~ 2155   年份
   在lua里使用mysql语句插入时，以上类型以字符串的形式插入。 
   例如：
   time = os.date("%H:%M:%S", os.time())
   timestamp = os.date("%Y-%m-%d %H:%M:%S", os.time()) 
   sql = dbformat([[insert into test_db(create_time, create_timestamp) values(%s, %s)]], time, timestamp)
   db_query(sql, 1); 

5. left join ,  right join , inner join 外连接。 
   select a.userid, a.name, a.nick, b.id, b.date from test_join_tbl a left join test_join_tbl_1 b on a.userid = b.id limit 5; 
   select a.userid, a.name, a.nick, b.id, b.date from test_join_tbl a right join test_join_tbl_1 b on a.userid = b.id limit 5; 
   select a.userid, a.name, a.nick, b.id, b.date from test_join_tbl a inner join test_join_tbl_1 b on a.userid = b.id  limit 5; 

6. mysql的事务。 
   配置文件 my.cnf 
   [mysqld] 
   datadir=/var/lib/mysql    #存放数据的地方， mysql的数据都存在磁盘上， 这里会根据每一个数据库来存放数据，以及数据库的表
   socket=/var/lib/mysql/mysql.sock  # mysql的socket
   symbolic-links=0
   [mysqld_safe]
   log-error=/var/log/mariadb/mariadb.log
   pid-file=/var/run/mariadb/mariadb.pid

   mysql的innodb支持事务。 
   事务的4大特性。 ACID
   原子性。 事务的所有操作都是一个整体， 这些操作要么全部执行， 要么全部不执行。 
   一致性。 事务执行前和执行后的数据是一致的。 #比如事务执行前钱的总额是1000， 执行之后钱的总额也是1000。
   隔离性。 事务的隔离性根据不同的场景，有不同的隔离级别。 
   持久性。 持久性就是数据最终落地在磁盘。 事务提交之后，数据存在磁盘上，数据不会发生丢失，持久保存。 

   事务隔离的4个级别。 
   read uncommited  # 读未提交。 
   read  commited   #读已提交。 
   repeatable read  #可重复读。 innodb 默认的隔离级别。 
   serializable   # 序列化。 
   查看隔离级别。 select @@tx_isolation

   事务的3个命令：begin(事务开始）,   commit（事务提交） ,  rollback（事务回滚）; 

   mysql有7种日志。 
   重做日志 (redo log) , 回滚日志（undo log）， 二进制日志（binlog）, 错误日志（errorlog）, 慢查询日志（slow query log）, 一般查询日志（general log）, 中继日志（relay log）
   redo log , undo log,  bin log 这3种日志与事务有关。 
   
    redo log 包含易丢失的redo log buffer 和 持久的redo log file 两部分。 存于redo  log   file (重做日志文件）中。 
    事务开始之后就开始产生redo log， redo log的落盘并不是随着事务的提交才写入， 而是在事务的执行过程中，便开始写入redo log。 
    redo log用来记录所有被修改的数据。 
   
    undo log 回滚日志。 用来记录数据被修改之前的数据。 防止异常， 可以回滚到之前的某一个版本， 实现原子性操作。


7. mysql 的数据类型。 
    整型。 tinyint(m) 1个字节，-128~127； smallint(m)  2个字节， -32768~32767； mediumint 3个字节； int   4个字节； bigint 8个字节。 
    浮点型。 float(m,d)  单精度浮点型， 4个字节，8位精度， m总个数， d小数位。 double(m,d)  双精度浮点型， 8个字节，16位精度， m个总位数， d表示小数位。
    定点数。 decimal(m, d). 总数m < 65 , 小数点位数d < 30 且 d < m 。 
    字符串。 char(m) 固定长度，最多255， varchar(m) 固定长度， 最多65535个字符。 tinytext 可变长度， 最多255个字符。 text 可变长度， 65535。
                  mediumtext 可变长度， 最多2的24次方-1 ， longtext 可变长度， 最多2的32次方-1； 
    二进制类型。 tinyblob, blob, mediumblob , longblob. 
    日期和时间类型。 time 3个字节， year 1个字节， date 3个字节， timestamp 4个字节，  datetime 4个字节。 

    char  , varchar , text  的 区别。 
    数据的检索效率。 char > varchar > text. 
    char用于存储定长很方便， 如果知道某个数据的固定长度， 选择用char. 
    结论：1. 经常变化的字段用varchar. 
              2. 知道固定长度用char。 
              3. 超过255个字节的选择用varchar或text。 
              4. 能用varchar的地方不用text. 
              5. 能用数字类型的情况不用字符串类型， 使用字符串类型会降低查询和连接的性能。 




  
  













